<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="newsMapper"> <!-- Dao : sqlSession.selectList("freeMapper(-> namespace).freeList(-> id)");  -->

	<resultMap type="news" id="newsResultSet"> <!-- type : mybatis에서 설정한 별칭 id : select태그 -->
		<result column="nb_no" property="boardNo"></result>
		<result column="nb_title" property="boardTitle"></result>
		<result column="nb_content" property="boardContent"></result>
		<result column="nb_indate" property="boardIndate"></result>
		<result column="nb_views" property="boardViews"></result>
		<result column="m_name" property="memberName"></result>
		<result column="m_no" property="memberNo"></result>
		<result column="upload_name" property="uploadName"></result>
		<result column="upload_path" property="uploadPath"></result>
		<result column="upload_origin_name" property="uploadOriginName"></result>
	</resultMap> <!-- column : 실제 컬럼 명  property : Dto설정 변수명 -->

	<select id="newsList" resultMap="newsResultSet"> <!-- Dto로 반환할 경우 resultMap 사용해야 함 -->
		SELECT n.nb_no,
			   nb_title, 
			   nb_content, 
			   m.m_name, 
			   nb_indate, 
			   nb_views,
		 	   u.upload_path,
	   		   u.upload_name,
	   		   u.upload_origin_name  
		FROM news_board n 
		JOIN member m ON n.m_no = m.m_no
 		full JOIN NEWS_UPLOAD u ON n.nb_no = u.nb_no 
 		WHERE nb_delete IS NULL
		 -->
		 <!-- 조건식이 여러개 일 때 choose, when -->
		 <!-- #{searchText} 넘긴 free(Dto)객체의 값을 꺼낼때 / jsp에서는 ${free.searchText} -->
		<choose>
			<when test="category.equals('nb_title')">
				AND nb_title LIKE '%' || #{searchText} || '%' 
			</when>
			<when test="category.equals('nb_content')">
				AND nb_content LIKE '%' || #{searchText} || '%' 
			</when>
		</choose>
		ORDER BY nb_indate DESC 
	</select>
	
	<!-- _int : 정수형 타입(기본형 변수 int),  int : 객체(Wrapper클래스 : Integer) -->
	<select id="getListCount" resultType="_int"> <!-- resultType : 반환타입 -->
		SELECT count(*) FROM news_board
		
		<choose>
			<when test="category.equals('nb_title')">
				WHERE nb_title LIKE '%' || #{searchText} || '%' 
			</when>
			<when test="category.equals('nb_content')">
				WHERE nb_content LIKE '%' || #{searchText} || '%' 
			</when>
		</choose>
	</select>
	
	<update id="addViews">
		UPDATE news_board
		SET nb_views = nb_views+1
		WHERE nb_no = #{boardNo}
	</update>
	
	<select id="getDetail" resultMap="newsResultSet">
		Select n.nb_no,
            nb_title,
            nb_content, 
            m.m_name,
            nb_indate,
            nb_views,
            m.m_no,
            u.upload_name,
            u.upload_path
        from news_board n 
        Join member m On m.m_no = n.m_no
        left join news_upload u On u.nb_no = n.nb_no
      	where n.nb_no = #{boardNo}
	</select>

	<insert id="enroll">
		<selectKey keyProperty="boardNo" resultType="_int" order="BEFORE"> <!-- keyProperty="boardNo" -> 넘긴 free객체의 boardNo변수 -->
			SELECT news_board_seq.nextval FROM dual <!-- 이 쿼리문의 실행결과를 keyProperty에 담겠다 -->
		</selectKey>
		INSERT INTO NEWS_BOARD 
		VALUES(#{boardNo}, 
			   #{boardTitle},
			   #{boardContent},
			   default,
			   default,
			   null,
			   null,
			   #{memberNo})
	</insert>

	<insert id="setUpload">
		INSERT INTO news_upload 
		VALUES(news_upload_SEQ.nextval,
			   #{uploadPath}, 
			   #{uploadName},
			   #{uploadOriginName},
			   #{boardNo})
	</insert>
	
	<update id="edit">
		UPDATE news_board SET nb_title = #{boardTitle}, 
							  nb_content = #{boardContent}, 
							  nb_update = sysdate
		WHERE nb_no = #{boardNo}
	</update>
	
	<select id="getFileName" resultMap="newsResultSet">
		SELECT upload_path, upload_name FROM news_upload
		WHERE nb_no = #{boardNo}
	</select>
	
	<update id="setUploadUpdate">
		UPDATE news_upload SET upload_path = #{uploadPath},
							   upload_name = #{uploadName},
							   upload_origin_name = #{uploadOriginName}
		WHERE nb_no = #{boardNo}
	</update>
	
	<update id="newsDelete">
		UPDATE news_board SET nb_delete = sysdate
		WHERE nb_no = #{boardNo}
	</update>
	
</mapper>